.. index:: pair: namespace; geode
.. _doxid-namespacegeode:

namespace geode
===============

.. toctree::
	:hidden:

	namespace_geode_detail.rst
	struct_geode_IndexToBRepMeshElementsMapping.rst
	struct_geode_IndexToModelMeshElementsMapping.rst
	struct_geode_IndexToSectionMeshElementsMapping.rst
	class_geode_BRepTopologyRebuilder.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	namespace geode {

	// namespaces

	namespace :ref:`geode::detail<doxid-namespacegeode_1_1detail>`;

	// typedefs

	typedef ModuleLicenseChecker<Conversion> :target:`ConversionLicenseChecker<doxid-namespacegeode_1aefa3e912a2ba332b4c87206d124e8d3e>`;
	typedef GenericMapping<index_t, index_t> :target:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`;
	typedef GenericMapping<index_t, MeshVertex> :target:`IndexToMeshVertexMapping<doxid-namespacegeode_1a4ce014adc6bcf2703d62a3543bbff66f>`;
	typedef GenericMapping<index_t, MeshElement> :target:`IndexToMeshElementMapping<doxid-namespacegeode_1a2d22ceb1e7c8a9120859220ceb716c24>`;

	// structs

	struct :ref:`IndexToBRepMeshElementsMapping<doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>`;
	struct :ref:`IndexToModelMeshElementsMapping<doxid-structgeode_1_1_index_to_model_mesh_elements_mapping>`;
	struct :ref:`IndexToSectionMeshElementsMapping<doxid-structgeode_1_1_index_to_section_mesh_elements_mapping>`;

	// classes

	class :ref:`BRepTopologyRebuilder<doxid-classgeode_1_1_b_rep_topology_rebuilder>`;

	// global variables

	static constexpr char :target:`Conversion<doxid-namespacegeode_1ad1f4f315c04552ffca405b2d61f83a6f>`[] = "Conversion";

	// global functions

	void geode_conversion_model_api :target:`build_blocks<doxid-namespacegeode_1af824d8001dd7c0a95398f4811ac40d32>`(BRep& brep);
	:target:`OPENGEODE_LIBRARY<doxid-namespacegeode_1a0508a634edded691d15457985d1bfd10>`(geode_conversion_model_api, ConversionModel);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1a55897b30a3ff5e25684f4268a974caad>`(PointSet);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1ab37389a784cc08889088d057d6745c8e>`(EdgedCurve);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1aa9eca13715aca2567523b81021cda51a>`(SurfaceMesh);
	:target:`ALIAS_3D<doxid-namespacegeode_1a3f3c5cdeee9a9389ffd9f740f987e982>`(PointSet);
	:target:`ALIAS_3D<doxid-namespacegeode_1ac3422b630458dde4bc69498508c56e4e>`(EdgedCurve);
	:target:`ALIAS_3D<doxid-namespacegeode_1a8494fd593c0c13b77aa7c916bb8662e2>`(SurfaceMesh);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1a8ac5cec34b9c5986e0c83548aeb19f2d>`(SolidMesh);
	:target:`ALIAS_3D<doxid-namespacegeode_1a3b78e29335d938bae6153ff18f271541>`(SolidMesh);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1a995b8f5f0b0ac39cbe7af64fd0506205>`(Block);
	:target:`ALIAS_3D<doxid-namespacegeode_1a0418407296b015103c7578c9c9c9a737>`(Block);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1afb6e6b42596c062c9d8764d858209433>`(Point);
	:target:`ALIAS_2D<doxid-namespacegeode_1a191f5017151d819329bd22601e529e17>`(PointSet);
	:target:`ALIAS_2D<doxid-namespacegeode_1aae4bea6f137a47558d5d46c1f90525b8>`(EdgedCurve);
	:target:`ALIAS_2D<doxid-namespacegeode_1a775f43c93e557302fbaa359aa0af2f19>`(SurfaceMesh);
	:target:`ALIAS_2D_AND_3D<doxid-namespacegeode_1a7986437714612066a303580285ecf217>`(SurfaceMesh);

	std::tuple<BRep, ModelMeshesVertexMapping, ModelMeshesElementMapping> geode_conversion_model_api :ref:`convert_meshes_into_brep<doxid-namespacegeode_1aff6017692c1ec62492f4d3d881836e26>`(
		absl::Span<const std::reference_wrapper<const PointSet3D>> corners,
		absl::Span<const std::reference_wrapper<const EdgedCurve3D>> curves,
		absl::Span<const std::reference_wrapper<const SurfaceMesh3D>> surfaces
		);

	std::tuple<BRep, :ref:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`, :ref:`IndexToBRepMeshElementsMapping<doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>`> geode_conversion_model_api :ref:`convert_solid_into_brep_from_adjacencies<doxid-namespacegeode_1a42a9e9e1de00010eb661e80bdf2e130c>`(SolidMesh3D& solid);

	std::tuple<BRep, :ref:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`, :ref:`IndexToBRepMeshElementsMapping<doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>`> geode_conversion_model_api :ref:`convert_solid_elements_into_brep<doxid-namespacegeode_1a99d91e699c394a9f29e0982a41fbba4f>`(
		SolidMesh3D& solid,
		absl::Span<const index_t> corner_vertices,
		absl::Span<const index_t> line_edges,
		absl::Span<const index_t> surface_facets
		);

	std::tuple<BRep, :ref:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`, :ref:`IndexToBRepMeshElementsMapping<doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>`> geode_conversion_model_api :ref:`convert_solid_into_brep_from_attribute<doxid-namespacegeode_1a1158207b9742193bd25ea0e100df77fa>`(
		SolidMesh3D& solid,
		absl::string_view attribute_name
		);

	std::tuple<BRep, ModelMeshesVertexMapping, ModelMeshesElementMapping> geode_conversion_model_api :ref:`add_sharp_features<doxid-namespacegeode_1a49cb67a8b0b0b2e1fab8dfe0d8c4b783>`(
		const BRep& model,
		double max_angle
		);

	std::tuple<Section, :ref:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`, :ref:`IndexToModelMeshElementsMapping<doxid-structgeode_1_1_index_to_model_mesh_elements_mapping>`> geode_conversion_model_api :target:`convert_surface_elements_into_section<doxid-namespacegeode_1a79d9d199ffadfd3d6819bff5d4cee94c>`(
		SurfaceMesh2D& surface,
		absl::Span<const index_t> corner_vertices,
		absl::Span<const index_t> line_edges
		);

	std::tuple<Section, ModelMeshesVertexMapping, ModelMeshesElementMapping> geode_conversion_model_api :target:`convert_meshes_into_section<doxid-namespacegeode_1a6835edf43c6cb86909b5fd0db7dfff76>`(
		absl::Span<const std::reference_wrapper<const PointSet2D>> corners,
		absl::Span<const std::reference_wrapper<const EdgedCurve2D>> curves,
		absl::Span<const std::reference_wrapper<const SurfaceMesh2D>> surfaces
		);

	std::tuple<Section, ModelMeshesVertexMapping, ModelMeshesElementMapping> geode_conversion_model_api :ref:`convert_surface_into_section_from_attribute<doxid-namespacegeode_1a6280b0a690369c7371a17214118bf057>`(
		SurfaceMesh2D& surface,
		absl::string_view attribute_name
		);

	} // namespace geode
.. _details-namespacegeode:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; convert_meshes_into_brep
.. _doxid-namespacegeode_1aff6017692c1ec62492f4d3d881836e26:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, ModelMeshesVertexMapping, ModelMeshesElementMapping> geode_conversion_model_api convert_meshes_into_brep(
		absl::Span<const std::reference_wrapper<const PointSet3D>> corners,
		absl::Span<const std::reference_wrapper<const EdgedCurve3D>> curves,
		absl::Span<const std::reference_wrapper<const SurfaceMesh3D>> surfaces
		)

Convert a set of EdgedCurve3D and SurfaceMesh3D into a BRep, without meshed Blocks. This function first merges the input surfaces together and then uses the adjacencies between surface polygons to determine BRep Surface extensions and, as a consequence, geometries of BRep Lines. BRep Lines will correspond to merged SurfaceMesh3D edges shared by 1 or more than 2 polygons, by 2 polygons if there are not set as adjacent, or by Curve edges. A colocation between the points of the input corners, curves and the merged surface is used to determine their common points, the position of the corners and the curves in the final model, and the corresponding topology of the corners and lines (internal/separating a line/surface in two/...).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- corners

		- Input corners

	*
		- curves

		- Input curves

	*
		- surfaces

		- Input surfaces



.. rubric:: Returns:

the BRep and the mapping between input corners, curves and surfaces and Corner, Line and Surface uuid. One input surface could contribute to several Surfaces depending on the merging result.

.. index:: pair: function; convert_solid_into_brep_from_adjacencies
.. _doxid-namespacegeode_1a42a9e9e1de00010eb661e80bdf2e130c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, :ref:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`, :ref:`IndexToBRepMeshElementsMapping<doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>`> geode_conversion_model_api convert_solid_into_brep_from_adjacencies(SolidMesh3D& solid)

Convert a SolidMesh3D into a BRep with meshed Blocks. This function uses the adjacencies between solid polyhedra to determine BRep Block extensions and, as a consequence, geometries of BRep Surfaces. BRep Surfaces will correspond to SolidMesh3D facets shared by only 1 polyhedron, or by 2 polyhedra if they are not set as adjacent.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- solid

		- Input solid

.. index:: pair: function; convert_solid_elements_into_brep
.. _doxid-namespacegeode_1a99d91e699c394a9f29e0982a41fbba4f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, :ref:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`, :ref:`IndexToBRepMeshElementsMapping<doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>`> geode_conversion_model_api convert_solid_elements_into_brep(
		SolidMesh3D& solid,
		absl::Span<const index_t> corner_vertices,
		absl::Span<const index_t> line_edges,
		absl::Span<const index_t> surface_facets
		)

Convert a SolidMesh3D into a BRep without meshed Blocks. This function uses the given solid points, edges and facets to define BRep corners, lines and surfaces. Returns VertexIndexMappings mapping the indices of the vertices in the given solid to the corresponding unique vertices in the output model, and :ref:`IndexToBRepMeshElementsMapping <doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>` mapping the indices of the given corner, line and surface elements to their elements in the output model.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- solid

		- Input solid

.. index:: pair: function; convert_solid_into_brep_from_attribute
.. _doxid-namespacegeode_1a1158207b9742193bd25ea0e100df77fa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, :ref:`VertexIndexMapping<doxid-namespacegeode_1af48507cffa74147271166d3c2e206f90>`, :ref:`IndexToBRepMeshElementsMapping<doxid-structgeode_1_1_index_to_b_rep_mesh_elements_mapping>`> geode_conversion_model_api convert_solid_into_brep_from_attribute(
		SolidMesh3D& solid,
		absl::string_view attribute_name
		)

Convert a SolidMesh3D into a BRep with meshed Blocks. This function uses Attribute values on each solid polyhedron to determine BRep Block. BRep Surfaces will correspond to SolidMesh3D facets shared by only 1 polyhedron, or by 2 polyhedra with different attribute values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- solid

		- Input solid

	*
		- attribute_name

		- Name of attribute stored on solid polyhedra @warn Attribute should be convertible to float.

.. index:: pair: function; add_sharp_features
.. _doxid-namespacegeode_1a49cb67a8b0b0b2e1fab8dfe0d8c4b783:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, ModelMeshesVertexMapping, ModelMeshesElementMapping> geode_conversion_model_api add_sharp_features(
		const BRep& model,
		double max_angle
		)

Creates a new BRep from the given one, with new lines on the sharp features of the surfaces (edges where the angle between the normals of the facets is higher than the given max_angle).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- model

		- Input brep

	*
		- max_angle

		- Dihedral angle between the facets under which their common edge is considered a sharp feature.

.. index:: pair: function; convert_surface_into_section_from_attribute
.. _doxid-namespacegeode_1a6280b0a690369c7371a17214118bf057:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<Section, ModelMeshesVertexMapping, ModelMeshesElementMapping> geode_conversion_model_api convert_surface_into_section_from_attribute(
		SurfaceMesh2D& surface,
		absl::string_view attribute_name
		)

Convert a SurfaceMesh2D into a Section with meshed Surfaces. This function uses the Attribute values on each surface polygon to determine Section surface. Section Lines will correspond to SurfaceMesh2D edges shared by only 1 polygon, or by 2 polygons with different attribute values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- solid

		- Input solid

	*
		- attribute_name

		- Name of attribute stored on solid polygons @warn Attribute should be convertible to float.

