.. index:: pair: namespace; geode
.. _doxid-namespacegeode:

namespace geode
===============

.. toctree::
	:hidden:

	namespace_geode_detail.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	namespace geode {

	// namespaces

	namespace :ref:`geode::detail<doxid-namespacegeode_1_1detail>`;

	// typedefs

	typedef ModuleLicenseChecker<Conversion> :target:`ConversionLicenseChecker<doxid-namespacegeode_1aefa3e912a2ba332b4c87206d124e8d3e>`;

	// global variables

	static constexpr char :target:`Conversion<doxid-namespacegeode_1ad1f4f315c04552ffca405b2d61f83a6f>`[] = "Conversion";

	// global functions

	void geode_conversion_model_api :target:`build_blocks<doxid-namespacegeode_1af824d8001dd7c0a95398f4811ac40d32>`(BRep& brep);
	:target:`OPENGEODE_LIBRARY<doxid-namespacegeode_1a0508a634edded691d15457985d1bfd10>`(geode_conversion_model_api, ConversionModel);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1ab37389a784cc08889088d057d6745c8e>`(EdgedCurve);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1aa9eca13715aca2567523b81021cda51a>`(SurfaceMesh);
	:target:`ALIAS_3D<doxid-namespacegeode_1ac3422b630458dde4bc69498508c56e4e>`(EdgedCurve);
	:target:`ALIAS_3D<doxid-namespacegeode_1a8494fd593c0c13b77aa7c916bb8662e2>`(SurfaceMesh);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1a8ac5cec34b9c5986e0c83548aeb19f2d>`(SolidMesh);
	:target:`ALIAS_3D<doxid-namespacegeode_1a3b78e29335d938bae6153ff18f271541>`(SolidMesh);
	:target:`FORWARD_DECLARATION_DIMENSION_CLASS<doxid-namespacegeode_1afb6e6b42596c062c9d8764d858209433>`(Point);
	:target:`ALIAS_2D<doxid-namespacegeode_1a775f43c93e557302fbaa359aa0af2f19>`(SurfaceMesh);
	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api :ref:`convert_surface_into_brep<doxid-namespacegeode_1ac79deb3d85a612315e3727afd0475daa>`(const SurfaceMesh3D& surface);
	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api :ref:`convert_surfaces_into_brep<doxid-namespacegeode_1a0c772d2a21fc999bae130782b86f026f>`(absl::Span<const std::reference_wrapper<const SurfaceMesh3D>> surfaces);

	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api :ref:`convert_curves_and_surfaces_into_brep<doxid-namespacegeode_1a9b241eb2831ef6fa996a14232ab892dc>`(
		absl::Span<const std::reference_wrapper<const EdgedCurve3D>> curves,
		absl::Span<const std::reference_wrapper<const SurfaceMesh3D>> surfaces
		);

	BRep geode_conversion_model_api :ref:`convert_solid_into_brep_from_adjacencies<doxid-namespacegeode_1acee492fff074e02fa81aebd8aab70e6b>`(const SolidMesh3D& solid);

	BRep geode_conversion_model_api :ref:`convert_solid_into_brep_from_attribute<doxid-namespacegeode_1a92d35cbc4515b193913214a9fb29e2f4>`(
		SolidMesh3D& solid,
		absl::string_view attribute_name
		);

	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api :ref:`add_sharp_features<doxid-namespacegeode_1a6b64ed1684bf5f969f4d8267192fd978>`(
		const BRep& model,
		double max_angle
		);

	Section geode_conversion_model_api :target:`convert_surface_into_section<doxid-namespacegeode_1a82b91748e58ceed17e8283e4fa57f39f>`(const SurfaceMesh2D& surface);
	Section geode_conversion_model_api :target:`convert_surfaces_into_section<doxid-namespacegeode_1a31dc435c2149eec1ef5fca9ebe77921b>`(absl::Span<const std::reference_wrapper<const SurfaceMesh2D>> surfaces);

	Section geode_conversion_model_api :ref:`convert_surface_into_section_from_attribute<doxid-namespacegeode_1a4cd6697bea5e1468859e6c1d301eb324>`(
		SurfaceMesh2D& surface,
		absl::string_view attribute_name
		);

	} // namespace geode
.. _details-namespacegeode:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Global Functions
----------------

.. index:: pair: function; convert_surface_into_brep
.. _doxid-namespacegeode_1ac79deb3d85a612315e3727afd0475daa:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api convert_surface_into_brep(const SurfaceMesh3D& surface)

Convert a SurfaceMesh3D into a BRep, without meshed Blocks. This function uses the adjacencies between surface polygons to determine BRep Surface extensions and, as a consequence, geometries of BRep Lines. BRep Lines will correspond to SurfaceMesh3D edges shared by 1 or more than 2 polygons, or by 2 polygons if there are not set as adjacent.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- surface

		- Input surface

.. index:: pair: function; convert_surfaces_into_brep
.. _doxid-namespacegeode_1a0c772d2a21fc999bae130782b86f026f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api convert_surfaces_into_brep(absl::Span<const std::reference_wrapper<const SurfaceMesh3D>> surfaces)

Convert a set of SurfaceMesh3D into a BRep, without meshed Blocks. This function first merged the input surfaces together and then uses the adjacencies between surface polygons to determine BRep Surface extensions and, as a consequence, geometries of BRep Lines. BRep Lines will correspond to merged SurfaceMesh3D edges shared by 1 or more than 2 polygons, or by 2 polygons if there are not set as adjacent.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- surfaces

		- Input surfaces



.. rubric:: Returns:

the BRep and the mapping between input surfaces and Surface uuid. One input surface could contribute to several Surfaces depending on the merging result.

.. index:: pair: function; convert_curves_and_surfaces_into_brep
.. _doxid-namespacegeode_1a9b241eb2831ef6fa996a14232ab892dc:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api convert_curves_and_surfaces_into_brep(
		absl::Span<const std::reference_wrapper<const EdgedCurve3D>> curves,
		absl::Span<const std::reference_wrapper<const SurfaceMesh3D>> surfaces
		)

Convert a set of EdgedCurve3D and SurfaceMesh3D into a BRep, without meshed Blocks. This function first merges the input surfaces together and then uses the adjacencies between surface polygons and the given curves to determine BRep Surface extensions and, as a consequence, geometries of BRep Lines. BRep Lines will correspond to merged SurfaceMesh3D edges shared by 1 or more than 2 polygons, by 2 polygons if there are not set as adjacent, or by Curve edges.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- curves

		- Input curves

	*
		- surfaces

		- Input surfaces



.. rubric:: Returns:

the BRep and the mapping between input curves and surfaces and Line and Surface uuid. One input surface could contribute to several Surfaces depending on the merging result.

.. index:: pair: function; convert_solid_into_brep_from_adjacencies
.. _doxid-namespacegeode_1acee492fff074e02fa81aebd8aab70e6b:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	BRep geode_conversion_model_api convert_solid_into_brep_from_adjacencies(const SolidMesh3D& solid)

Convert a SolidMesh3D into a BRep with meshed Blocks. This function uses the adjacencies between solid polyhedra to determine BRep Block extensions and, as a consequence, geometries of BRep Surfaces. BRep Surfaces will correspond to SolidMesh3D facets shared by only 1 polyhedron, or by 2 polyhedra if they are not set as adjacent.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- solid

		- Input solid

.. index:: pair: function; convert_solid_into_brep_from_attribute
.. _doxid-namespacegeode_1a92d35cbc4515b193913214a9fb29e2f4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	BRep geode_conversion_model_api convert_solid_into_brep_from_attribute(
		SolidMesh3D& solid,
		absl::string_view attribute_name
		)

Convert a SolidMesh3D into a BRep with meshed Blocks. This function uses Attribute values on each solid polyhedron to determine BRep Block. BRep Surfaces will correspond to SolidMesh3D facets shared by only 1 polyhedron, or by 2 polyhedra with different attribute values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- solid

		- Input solid

	*
		- attribute_name

		- Name of attribute stored on solid polyhedra @warn Attribute should be convertible to float.

.. index:: pair: function; add_sharp_features
.. _doxid-namespacegeode_1a6b64ed1684bf5f969f4d8267192fd978:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::tuple<BRep, ComponentMeshVertexMapping, ComponentMeshElementMapping> geode_conversion_model_api add_sharp_features(
		const BRep& model,
		double max_angle
		)

Creates a new BRep from the given one, with new lines on the sharp features of the surfaces (edges where the angle between the normals of the facets is higher than the given max_angle).



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- model

		- Input brep

	*
		- max_angle

		- Dihedral angle between the facets under which their common edge is considered a sharp feature.

.. index:: pair: function; convert_surface_into_section_from_attribute
.. _doxid-namespacegeode_1a4cd6697bea5e1468859e6c1d301eb324:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Section geode_conversion_model_api convert_surface_into_section_from_attribute(
		SurfaceMesh2D& surface,
		absl::string_view attribute_name
		)

Convert a SurfaceMesh2D into a Section with meshed Surfaces. This function uses the Attribute values on each surface polygon to determine Section surface. Section Lines will correspond to SurfaceMesh2D edges shared by only 1 polygon, or by 2 polygons with different attribute values.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- solid

		- Input solid

	*
		- attribute_name

		- Name of attribute stored on solid polygons @warn Attribute should be convertible to float.

