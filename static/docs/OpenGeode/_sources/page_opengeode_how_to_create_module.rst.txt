.. index:: pair: page; How to create your own OpenGeode module
.. _doxid-opengeode_how_to_create_module:

How to create your own OpenGeode module
=======================================

This page explains how you can create a module that depends on OpenGeode, for developing your own features. The procedure is very simple and we provide you tools for working quickly.

What do you need
================

The only thing you need is OpenGeode. Make sure OpenGeode is compiled and installed.

First step - Create an OpenGeode module architecture
====================================================

The first step is to create your module architecture. We help you by providing a template for module architecture.

#. Go on our GitHub template repository for OpenGeode modules: `https://github.com/Geode-solutions/OpenGeode-ModuleTemplate <https://github.com/Geode-solutions/OpenGeode-ModuleTemplate>`__

#. Click on ``Use this template``. Il will allow you to create a repository from this template repository. Choose all options you want inclding, ownership, repo name, public or private access.

#. Finalize by clicking on ``Create repository from template``.

You have created a repository. You can now clone it and go to the second step.

Second step - Replace templated names by your own.
==================================================

Have a quick look at your new repository. There are three folders: one for the headers of your libs, one for the sources, and the last for tests. There are also few files. If you need information on these files go to the last section ``What are these files in module repository``.

Open CMakeLists.txt in your favorite text editor or IDE.

#. Define the name of your module in place of ``MyModule`` in ``project(MyModule CXX)``.

#. Change the name of the option ``MYMODULE_WITH_TESTS`` or remove this option if you do not want to make tests for your module (which is never a good idea!). Be careful this option appears twice in the file.

#. Define the libraries in your module by adding one call to ``add_geode_library`` per library.

Your CMakeLists.txt is now ready.

Last step - Configure and build your module.
============================================

As for OpenGeode :ref:`configuration and compilation <doxid-opengeode_how_to_compile>`, this step depends on your platform. Follow the same procedure than for OpenGeode but by specifying the ``CMAKE_PREFIX_PATH`` to OpenGeode install path. For example:

.. ref-code-block:: cpp

	cmake -DCMAKE_PREFIX_PATH=path/to/OpenGeode/build/opengeode/install ..

The last thing to do is to modify headers (.h) and sources (.cpp) files by replacing ``mylib`` by the name your choose for your libs and ``mymodule`` by the name of your module. The rest is up to you!

Additional info - What are these files in module repository
-----------------------------------------------------------

Template repository contains some files. Here is information on these files:

* ``LICENSE`` - In this file you specify the Licence of your module

* ``README.md`` - This file is used as overview of your GitHub project. Add any information you consider necessary.

* ``azure-pipelines.yml`` - Configuration file for running jobs in Azure DevOps pipelines (for formatting, testing and much more).

* ``.clang-format`` - Format rules file used by clang. Run it by your own or automatize formatting using this file and CI tools.

* ``.gitattributes`` - List of attributes on files and folders (e.g. ignored by GitHub for repository languages)

* ``.gitignore`` - List of files and folders ignored by Git.

* ``.releaserc`` - Configuration file for semantic-release. Have a look at `https://github.com/semantic-release/semantic-release <https://github.com/semantic-release/semantic-release>`__ it's great!

