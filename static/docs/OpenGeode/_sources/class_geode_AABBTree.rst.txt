.. index:: pair: class; geode::AABBTree
.. _doxid-classgeode_1_1_a_a_b_b_tree:

template class geode::AABBTree
==============================

.. toctree::
	:hidden:

	class_geode_AABBTree_Impl.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <aabb.h>
	
	template <index_t dimension>
	class AABBTree
	{
	public:
		// classes
	
		class :ref:`Impl<doxid-classgeode_1_1_a_a_b_b_tree_1_1_impl>`;

		// construction
	
		:ref:`AABBTree<doxid-classgeode_1_1_a_a_b_b_tree_1a15a30ecc86d4ba1cd504ad6eeeb38c2e>`();
		:target:`AABBTree<doxid-classgeode_1_1_a_a_b_b_tree_1a5946d01f19301b57c2040e76dcf271d3>`(absl::Span<const :ref:`BoundingBox<doxid-classgeode_1_1_bounding_box>`<dimension>> bboxes);
		:target:`AABBTree<doxid-classgeode_1_1_a_a_b_b_tree_1aa46b589d373f758717e8388254ee29db>`(AABBTree&&);

		// methods
	
		AABBTree& :target:`operator =<doxid-classgeode_1_1_a_a_b_b_tree_1a1038006ebb78e73b13e34ce9ab7abbc5>` (AABBTree&& other);
		:ref:`index_t<doxid-namespacegeode_1a128f6686f72f4c3ef6c04172aacb7f05>` :ref:`nb_bboxes<doxid-classgeode_1_1_a_a_b_b_tree_1a279a079000abc4d4319b8dfce24ec5cf>`() const;
		const :ref:`BoundingBox<doxid-classgeode_1_1_bounding_box>`<dimension>& :target:`bounding_box<doxid-classgeode_1_1_a_a_b_b_tree_1a8c96181abacb46537004919fe764a657>`() const;
	
		template <typename EvalDistance>
		std::tuple<:ref:`index_t<doxid-namespacegeode_1a128f6686f72f4c3ef6c04172aacb7f05>`, :ref:`Point<doxid-classgeode_1_1_point>`<dimension>, double> :ref:`closest_element_box<doxid-classgeode_1_1_a_a_b_b_tree_1a3cc03c54455ea2e519b4d336e53e9689>`(
			const :ref:`Point<doxid-classgeode_1_1_point>`<dimension>& query,
			const EvalDistance& action
			) const;
	
		template <class EvalIntersection>
		void :ref:`compute_bbox_element_bbox_intersections<doxid-classgeode_1_1_a_a_b_b_tree_1a9570be26e77d64182961a3266fff36c7>`(
			const :ref:`BoundingBox<doxid-classgeode_1_1_bounding_box>`<dimension>& box,
			EvalIntersection& action
			) const;
	
		template <class EvalIntersection>
		void :ref:`compute_self_element_bbox_intersections<doxid-classgeode_1_1_a_a_b_b_tree_1a1265a269f8b687b6f199af13b7c4e0b4>`(EvalIntersection& action) const;
	
		template <class EvalIntersection>
		void :ref:`compute_other_element_bbox_intersections<doxid-classgeode_1_1_a_a_b_b_tree_1a7cb13bb10021dc9fe5b9044b603136da>`(
			const AABBTree<dimension>& other_tree,
			EvalIntersection& action
			) const;
	
		template <class EvalIntersection>
		void :ref:`compute_ray_element_bbox_intersections<doxid-classgeode_1_1_a_a_b_b_tree_1a557f99f2a9fa9cb159c8508660694d05>`(
			const :ref:`Ray<doxid-classgeode_1_1_ray>`<dimension>& ray,
			EvalIntersection& action
			) const;
	
		template <class EvalIntersection>
		void :ref:`compute_line_element_bbox_intersections<doxid-classgeode_1_1_a_a_b_b_tree_1af0479516b1697fe1c7335c050de94326>`(
			const :ref:`InfiniteLine<doxid-classgeode_1_1_infinite_line>`<dimension>& line,
			EvalIntersection& action
			) const;
	};
.. _details-classgeode_1_1_a_a_b_b_tree:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Construction
------------

.. index:: pair: function; AABBTree
.. _doxid-classgeode_1_1_a_a_b_b_tree_1a15a30ecc86d4ba1cd504ad6eeeb38c2e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	AABBTree()

AABB is a search tree for fast spatial request using the bounding box organisation of elements stored in a single container.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- bboxes

		- container containing elements bounding boxes. Each element can then be accessed using the index of its box in the tree which should match the index in its initial container.

Methods
-------

.. index:: pair: function; nb_bboxes
.. _doxid-classgeode_1_1_a_a_b_b_tree_1a279a079000abc4d4319b8dfce24ec5cf:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`index_t<doxid-namespacegeode_1a128f6686f72f4c3ef6c04172aacb7f05>` nb_bboxes() const

Gets the number of boxes in the lower level of the aabb tree.

This value should match the initial size of the container that store all objects to organize the the aabb tree.

.. index:: pair: function; closest_element_box
.. _doxid-classgeode_1_1_a_a_b_b_tree_1a3cc03c54455ea2e519b4d336e53e9689:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <typename EvalDistance>
	std::tuple<:ref:`index_t<doxid-namespacegeode_1a128f6686f72f4c3ef6c04172aacb7f05>`, :ref:`Point<doxid-classgeode_1_1_point>`<dimension>, double> closest_element_box(
		const :ref:`Point<doxid-classgeode_1_1_point>`<dimension>& query,
		const EvalDistance& action
		) const

Gets the closest element to a point.

if several elements box match the distance computation, then one of them will be randomly returned.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- query

		- the point to test

	*
		- action

		- the functor to compute the distance between the ``query`` and the tree element in boxes

	*
		- EvalDistance

		- 
		  this functor should have an operator() defined like this: std::tuple< double, Point< dimension > > operator()( const Point< dimension >& query, index_t curent_element_box ) const ; the output tuple contains
		  
		  * a double to store the distance between the point ``query`` and the element stored in the ``curent_element_box``.
		  
		  * a Point< dimension > to store the nearest point from ``query`` on the object stored in the ``curent_element_box``.



.. rubric:: Returns:

a tuple containing:

* the index of the closest element/box.

* the nearest point on the element in box.

* the distance between the ``query`` and ``nearest_point``.

.. index:: pair: function; compute_bbox_element_bbox_intersections
.. _doxid-classgeode_1_1_a_a_b_b_tree_1a9570be26e77d64182961a3266fff36c7:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class EvalIntersection>
	void compute_bbox_element_bbox_intersections(
		const :ref:`BoundingBox<doxid-classgeode_1_1_bounding_box>`<dimension>& box,
		EvalIntersection& action
		) const

Computes the intersections between a given box and the all element boxes.

the operator define what to do with the box ``cur_element_box`` if it is intersected by the ``box``.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- box

		- the box to test

	*
		- action

		- The functor to run when an element box intersects ``box``

	*
		- EvalIntersection

		- this functor should have an operator() defined like this: void operator()( index_t cur_element_box ) ;

.. index:: pair: function; compute_self_element_bbox_intersections
.. _doxid-classgeode_1_1_a_a_b_b_tree_1a1265a269f8b687b6f199af13b7c4e0b4:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class EvalIntersection>
	void compute_self_element_bbox_intersections(EvalIntersection& action) const

Computes the self intersections of the element boxes.

cur_element_box1 and cur_element_box2 are the element box indices that intersect.

the operator defines what to do when two boxes of the tree (``cur_element_box1`` and ``cur_element_box2``) intersect each other (for example: test real intersection between each element in boxes and store the result.)



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- action

		- The functor to run when two boxes intersect

	*
		- EvalIntersection

		- this functor should have an operator() defined like this: void operator()( index_t cur_element_box1, index_t cur_element_box2 ) ;

.. index:: pair: function; compute_other_element_bbox_intersections
.. _doxid-classgeode_1_1_a_a_b_b_tree_1a7cb13bb10021dc9fe5b9044b603136da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class EvalIntersection>
	void compute_other_element_bbox_intersections(
		const AABBTree<dimension>& other_tree,
		EvalIntersection& action
		) const

Computes all the intersections of the element boxes between this tree and another one.

cur_element_box1 and cur_element_box2 are the element box indices that intersect in the current tree and in the other tree.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- action

		- The functor to run when two boxes intersect

	*
		- EvalIntersection

		- this functor should have an operator() defined like this: void operator()( index_t cur_element_box1, index_t cur_element_box2 ) ;

.. index:: pair: function; compute_ray_element_bbox_intersections
.. _doxid-classgeode_1_1_a_a_b_b_tree_1a557f99f2a9fa9cb159c8508660694d05:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class EvalIntersection>
	void compute_ray_element_bbox_intersections(
		const :ref:`Ray<doxid-classgeode_1_1_ray>`<dimension>& ray,
		EvalIntersection& action
		) const

Computes the intersections between a given ray and all element boxes.

the operator define what to do with the box ``cur_element_box`` if it is intersected by the ``ray``.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- ray

		- The ray to test.

	*
		- action

		- The functor to run when a box is intersected by the ray.

	*
		- EvalIntersection

		- this functor should have an operator() defined like this: void operator()( index_t cur_element_box ) ;

.. index:: pair: function; compute_line_element_bbox_intersections
.. _doxid-classgeode_1_1_a_a_b_b_tree_1af0479516b1697fe1c7335c050de94326:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class EvalIntersection>
	void compute_line_element_bbox_intersections(
		const :ref:`InfiniteLine<doxid-classgeode_1_1_infinite_line>`<dimension>& line,
		EvalIntersection& action
		) const

Computes the intersections between a given infinite line and all element boxes.

the operator define what to do with the box ``cur_element_box`` if it is intersected by the ``line``.



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- line

		- The line to test.

	*
		- action

		- The functor to run when a box is intersected by the line.

	*
		- EvalIntersection

		- this functor should have an operator() defined like this: void operator()( index_t cur_element_box ) ;

