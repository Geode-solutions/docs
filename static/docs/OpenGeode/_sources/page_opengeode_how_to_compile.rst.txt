.. index:: pair: page; How to compile OpenGeode
.. _doxid-opengeode_how_to_compile:

How to compile OpenGeode
========================

What do you need
================

OS
~~

OpenGeode is supported and continuously tested on several platforms:

Windows - Visual Studio 2017 Ubuntu 16.04 macOS X High Sierra (10.13)

Pre-compiled binaries on these three platforms are also provided. :ref:`This page <doxid-opengeode_where_to_get_binaries>` describes where to download these binaries.

CMake
~~~~~

OpenGeode comes with a CMake configuration file. You can modified two items:

``CMAKE_BUILD_TYPE`` : choose build configuration (Release, Debug). By default Release. ``OPENGEODE_WITH_TESTS`` : switch on/off the OpenGeode test environment

Your version of CMake should be at least 3.7.2 (3.11 for MacOS Mojave and above users).

Compiler
~~~~~~~~

On Windows, we recommend to use Visual Studio 15 2017. On Linux and macOS, you can use gcc/g++ as compiler. You need a version equal to or higher than 4.8. On macOS, you can also install Mac OS "Command Line Developer Tools" and use clang.

OpenGeode configuration and compilation
=======================================

The configuration and compiling of OpenGeode is very simple. This will be achieved in few steps depending on your platform.

On Windows
~~~~~~~~~~

Configuration
-------------

#. Launch CMake interface.

#. Set where is the OpenGeode source code and where to build the binaries as path/to/OpenGeode/build.

#. Choose your configuration options. Take care to choose as current generator ``Visual Studio 15 2017``.

#. Launch the configure and generate option.

Compilation
-----------

#. Click on ``Open Project`` in the CMake interface. It opens Visual Studio 2017 and the generated solution.

#. Build the solution.

That's all! You are ready to work with OpenGeode.

On Linux
~~~~~~~~

Configuration
-------------

#. Open a terminal where is the OpenGeode source code.

#. Create a ``build`` directory:
   
   .. ref-code-block:: cpp
   
   	mkdir build; cd build

#. Run cmake:
   
   .. ref-code-block:: cpp
   
   	cmake ..
   
   for default configuration or
   
   .. ref-code-block:: cpp
   
   	ccmake ..
   
   or
   
   .. ref-code-block:: cpp
   
   	cmake-gui ..
   
   for choosing configuration options.

Compilation
-----------

#. Run ``make`` command in the build directory.

Now you are ready to work with OpenGeode.

On macOS
~~~~~~~~

Configuration
-------------

#. Open a terminal where is the OpenGeode source code.

#. Create a ``build`` directory:  build; cd build

#. Run cmake:
   
   .. ref-code-block:: cpp
   
   	cmake ..
   
   for default configuration or
   
   .. ref-code-block:: cpp
   
   	ccmake ..
   
   or
   
   .. ref-code-block:: cpp
   
   	cmake-gui ..
   
   for choosing configuration options.

If you want to use Xcode, we suggest you to use CMake GUI interface to select Xcode as generator (or use cmake options "-G Xcode" command lines).

Compilation
-----------

Without Xcode (Clang in command line)
+++++++++++++++++++++++++++++++++++++

Run ``make`` command in the build directory.

With Xcode
++++++++++

Open the project "SuperBuild.xcodeproj" with Xcode: ``open SuperBuild.xcodeproj``, and then compile using the graphical interface.

Or, you can directly compile with the terminal: ``xcodebuild -project SuperBuild.xcodeproj -alltargets -configuration Release``. Replace "Release" by "Debug" to compile in debug mode.

Now you are ready to work with OpenGeode.

